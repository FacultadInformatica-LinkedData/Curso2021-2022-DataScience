# -*- coding: utf-8 -*-
"""Task09.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ysk87YYU2siLaHOcLT9TgLwFmJMfdda2

**Task 09: Data linking**
"""

github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials/"

from rdflib import Graph, Namespace, RDF

g1 = Graph()
g2 = Graph()
g3 = Graph()
g1.parse(github_storage + "rdf/data03.rdf", format="xml")
g2.parse(github_storage + "rdf/data04.rdf", format="xml")

for s, p, o in g1:
    print(s, p, o)
print("=======================================================================")

for s, p, o in g2:
    print(s, p, o)

"""Busca individuos en los dos grafos y enlázalos mediante la propiedad OWL:sameAs, inserta estas coincidencias en g3. Consideramos dos individuos iguales si tienen el mismo apodo y nombre de familia. Ten en cuenta que las URI no tienen por qué ser iguales para un mismo individuo en los dos grafos."""

ns1 = Namespace("http://data.three.org#")
ns2 = Namespace("http://data.four.org#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
owl = Namespace("http://www.w3.org#")

# Busqueda grafo 1
individuos_1 = []
for s, p, o in g1.triples((None, RDF.type, ns1.Person)):
    apodo = ""
    familia = ""
    for s1, p1, o1 in g1.triples((s, vcard.Given, None)):
        apodo = o1
    for s2, p2, o2 in g1.triples((s, vcard.Family, None)):
        familia = o2
    individuos_1 += [(s, apodo, familia)]

# for elem in individuos_1:
#  print(elem[1], elem[2])

# Búsqueda grafo 2
individuos_2 = []
for s, p, o in g2.triples((None, RDF.type, ns2.Person)):
    apodo = ""
    familia = ""
    for s1, p1, o1 in g2.triples((s, vcard.Given, None)):
        apodo = o1
    for s2, p2, o2 in g2.triples((s, vcard.Family, None)):
        familia = o2
    individuos_2 += [(s, apodo, familia)]

# for elem in individuos_2:
#  print(elem[1], elem[2])

# g3.remove((None, None, None))

for persona1 in individuos_1:
    for persona2 in individuos_2:
        if persona1[1] == persona2[1] and persona1[2] == persona2[2]:
            print(persona1[1], persona1[2], persona2[1], persona2[2])
            g3.add((persona1[0], owl.sameAs, persona2[0]))

for s, p, o in g3:
    print(s, p, o)
