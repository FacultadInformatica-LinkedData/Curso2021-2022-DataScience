# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FlWj0ZqWT8Jc-Mf3FS4WWGCZmYEuKj5m

**Task 07: Querying RDF(s)**
"""

!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
from rdflib.plugins.sparql import prepareQuery
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

# TO DO
ns = Namespace("http://somewhere#")
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

#Usando RDFlib
lista_subclases = []
for s, p, o in g.triples((None, RDFS.subClassOf, ns.Person)):
    print(s)
    lista_subclases += [s]

#SPARQL
q1 = prepareQuery('''
  SELECT ?Subclass WHERE { 
    ?Subclass RDFS:subClassOf ns:Person. 
  }
  ''',
                  initNs={"RDFS": RDFS, "ns": ns}
                  )

for r in g.query(q1):
    print(r.Subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
personas = []
for s, p, o in g.triples((None, RDF.type, ns.Person)):
    print(s)
for subclase in lista_subclases:
    for s1, p1, o1 in g.triples((None, RDF.type, subclase)):
        print(s1)
        personas += [s1]


individuals = prepareQuery('''
  SELECT DISTINCT ?Persons WHERE { 
    ?Persons RDF:type ns:Person.
  }
  ''',
                  initNs={"ns": ns, "RDF": RDF}
                  )

individuals_subclases = prepareQuery('''
  SELECT DISTINCT ?Persons WHERE { 
    ?Subclass RDFS:subClassOf ns:Person.
    ?Persons RDF:type ?Subclass
  }
  ''',
                  initNs={"RDFS": RDFS, "ns": ns, "RDF": RDF}
                  )
for r in g.query(individuals):
    print(r.Persons)
for r in g.query(individuals_subclases):
    print(r.Persons)

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

"""

# TO DO

for person in personas:
    for s, p, o in g.triples((person, None, None)):
        print(p, o)


propiedades_person = prepareQuery('''
  SELECT DISTINCT ?Persons ?Property ?Object WHERE { 
    ?Persons RDF:type ns:Person.
    ?Persons ?Property ?Object
  }
  ''',
                  initNs={"ns": ns, "RDF": RDF}
                  )

propiedades_subclass = prepareQuery('''
  SELECT DISTINCT ?Persons ?Property ?Object WHERE { 
    ?Subclass RDFS:subClassOf ns:Person.
    ?Persons RDF:type ?Subclass.
    ?Persons ?Property ?Object.
  }
  ''',
                  initNs={"RDFS": RDFS, "ns": ns, "RDF": RDF}
                  )

for person in personas:
    for r in g.query(propiedades_person):
        if r.Persons == person:
            print(r.Property, r.Object)
    for r in g.query(propiedades_subclass):
        if r.Persons == person:
            print(r.Property, r.Object)