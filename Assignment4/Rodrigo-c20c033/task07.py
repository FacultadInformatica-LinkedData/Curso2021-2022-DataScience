# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RI7TUJ6BxJU-J3TvmgskiSxKltbsRlim

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
from rdflib.plugins.sparql import prepareQuery
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")
ns = Namespace("http://somewhere#")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

for s, p, o in g.triples((None, RDFS.subClassOf, ns.Person)):
  print(s)

from rdflib.plugins.sparql import prepareQuery

q1 = prepareQuery('''
  SELECT ?Subject WHERE { 
    ?Subject RDFS:subClassOf ns:Person. 
  }
  ''',
  initNs = {"RDFS": RDFS, "ns":ns}
)

for r in g.query(q1):
  print(r.Subject)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

ListaClaseSuperior = [ns.Person] # this list will contain ns.person and all of its subclasses
while len(ListaClaseSuperior) != 0:
  clase = ListaClaseSuperior[0]
  ListaClaseSuperior = ListaClaseSuperior[1:] # we eliminate the element being analyze
  for s, p, o in g.triples((None, RDFS.subClassOf, clase)):
    ListaClaseSuperior += [s] # we add to the list all subclases of "clase"
  for s, p, o in g.triples((None, RDF.type, clase)):
    print(s) # visualize the results

q2 = prepareQuery('''
  SELECT DISTINCT ?Persons ?PersonsS WHERE { 
    ?Persons RDF:type ns:Person.
    ?Subclass RDFS:subClassOf ns:Person.
    ?PersonsS RDF:type ?Subclass
  }
  ''',
  initNs={"ns": ns, "RDFS": RDFS, "RDF": RDF})

for r in g.query(q2):
    print(r.Persons)
    print(r.PersonsS)

"""ListaClaseSuperior = ["http://somewhere#Person"] # this list will contain ns.person and all of its subclasses
listaElementos = []
while len(ListaClaseSuperior) != 0:
  clase = Namespace(ListaClaseSuperior[0]) 
  ListaClaseSuperior = ListaClaseSuperior[1:] # we eliminate the element being analyze

  q3 = prepareQuery('''
    SELECT ?Instance ?Subclases WHERE { 
      OPTIONAL{?Instance RDF:type '''+ f"<{clase}>"+'''}
      OPTIONAL{?Subclases RDFS:subClassOf '''+ f"<{clase}>"+'''}
    }
    ''',
    initNs = {"RDFS": RDFS, "RDF":RDF,  "ns":ns}
    )
  for r in g.query(q3):
    if not(r.Instance in listaElementos):
      listaElementos += [r.Instance]
    ListaClaseSuperior += [r.Subclases]

for i in listaElementos:
  print(i)

**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**
"""

# TO DO

ListaClaseSuperior = [ns.Person] # this list will contain ns.person and all of its subclasses
while len(ListaClaseSuperior) != 0:
  clase = ListaClaseSuperior[0] 
  ListaClaseSuperior = ListaClaseSuperior[1:] # we eliminate the element being analyze
  for s, p, o in g.triples((None, RDFS.subClassOf, clase)):
    ListaClaseSuperior += [s] # we add to the list all subclases of "clase"
  for s, p, o in g.triples((None, RDF.type, clase)): # all individuals of that "clase" class
    for s2, p2, o2 in g.triples((s, None, None)): # all properties of "s" individual
      print(s2, p2, o2) # Visualize the results

q2 = prepareQuery('''
  SELECT ?Persons ?P ?O ?PersonsS ?PS ?OS WHERE { 
    ?Persons RDF:type ns:Person.
    ?Subclass RDFS:subClassOf ns:Person.
    ?PersonsS RDF:type ?Subclass.
    ?Persons ?P ?O.
    ?PersonsS ?PS ?OS.
  }
  ''',
  initNs={"ns": ns, "RDFS": RDFS, "RDF": RDF})

for r in g.query(q2):
  print(r.Persons, r.P, r.O)

"""
ListaClaseSuperior = ["http://somewhere#Person"] # this list will contain ns.person and all of its subclasses
listaElementos = []
while len(ListaClaseSuperior) != 0:
  clase = Namespace(ListaClaseSuperior[0]) 
  ListaClaseSuperior = ListaClaseSuperior[1:] # we eliminate the element being analyze

  q4 = prepareQuery('''
    SELECT ?Instance ?Subclases WHERE { 
      OPTIONAL{?Instance RDF:type '''+ f"<{clase}>"+'''}
      OPTIONAL{?Subclases RDFS:subClassOf '''+ f"<{clase}>"+'''}
    }
    ''',
    initNs = {"RDFS": RDFS, "RDF":RDF}
    )
  for r in g.query(q4):
    if not(r.Instance in listaElementos):
      listaElementos += [r.Instance]
      q5 = prepareQuery('''
        SELECT ?P ?O WHERE { 
          OPTIONAL{'''+ f"<{r.Instance}>"+''' ?P ?O}
        }
        ''',
        initNs = {"RDFS": RDFS, "RDF":RDF}
        )
      for s in g.query(q5):
        print(r.Instance, s.P, s.O)

    ListaClaseSuperior += [r.Subclases]
"""
