# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tV5j-DRcpPtoJGoMj8v2DSqR_9wyXeiE

**Task 07: Querying RDF(s)**
"""

#pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2020-2021/master/Assignment4"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
from rdflib.plugins.sparql import prepareQuery

with open('../python/example6.rdf', 'r') as f:
  g = Graph()
  g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
  g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
  g.parse(f, format="xml")
"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**

**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**
"""

"TASK 7.1:"
ns = Namespace("http://somewhere#")
#Con RDFLib
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
    print(s,p,o)
#Con SPRQL
q1 = prepareQuery('''
  SELECT 
    ?Subclass
  WHERE { 
    ?Subclass RDFS:subClassOf ns:Person.
  }
  ''',
  initNs={"RDFS": RDFS, "ns": ns}
)
for r in g.query(q1):
  print(r.Subclass)


"TASK 7.2:"
#Con RDFLib
for s,p,o in g.triples((None, RDF.type , ns.Person)):
    print(s,p,o)
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
    for s2,p2,o2 in g.triples((None,RDF.type,s)):
        print(s2,p2,o2)
#Con SPRQL
q1= prepareQuery('''
  SELECT 
    ?Persons
  WHERE { 
    ?Persons RDF:type ns:Person.
  }
  ''',
  initNs={"RDF": RDF, "ns": ns}
)
#subclases
q2 = prepareQuery('''
  SELECT 
    ?Persons
  WHERE { 
    ?Subclass RDFS:subClassOf ns:Person.
    ?Persons RDF:type ns:Person.
  }
  ''',
  initNs={"RDFS": RDFS, "ns": ns, "RDF":RDF}
)
for r in g.query(q1):
  print(r.Persons)

for r in g.query(q2):
  print(r.Persons)